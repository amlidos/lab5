{"ast":null,"code":"var _jsxFileName = \"/Users/omstudent/Desktop/lab4/src/App.js\";\nimport React, { Component } from \"react\";\nimport Timer from \"./Timer\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startStop = () => {\n      if (this.state.timer) {\n        clearInterval(this.state.timer);\n        this.setState({\n          timer: null\n        });\n      } else {\n        var timer = setInterval(() => {\n          const newCount = this.state.count - 1;\n          this.setState({\n            count: newCount,\n            timer: timer\n          });\n\n          if (this.state.count <= 0) {\n            clearInterval(this.state.timer);\n          }\n        }, 1);\n      }\n    };\n\n    this.updateCount = () => this.setState({\n      count: this.state.count + 1\n    });\n\n    this.reset = () => {\n      clearInterval(this.state.timer);\n      this.setState({\n        count: 90000,\n        timer: null\n      });\n    };\n\n    this.increment = () => {\n      this.setState({\n        count: this.state.count + 30000,\n        timer: null\n      });\n    };\n\n    this.decrement = () => {\n      if (this.state.count - 30000 >= 0) {\n        this.setState({\n          count: this.state.count - 30000,\n          timer: null\n        });\n      } else {\n        return;\n      }\n    };\n\n    this.updateTimerName = event => {\n      this.setState({\n        changingTimerName: event.target.value\n      });\n    };\n\n    this.setTimerName = () => {\n      this.setState({\n        timerName: this.state.changingTimerName\n      });\n    };\n\n    this.updateTime = event => {\n      this.setState({\n        changingCount: Number(event.target.value)\n      });\n    };\n\n    this.setTime = () => {\n      if (this.state.changingCount >= 0) {\n        this.setState({\n          count: this.state.changingCount\n        });\n      }\n    };\n\n    this.state = {\n      count: 90000,\n      timerName: \"Bacon Timer\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Timer, Object.assign({\n      startStop: this.startStop,\n      updateCount: this.updateCount,\n      reset: this.reset,\n      increment: this.increment,\n      decrement: this.decrement,\n      name: this.state.timerName\n    }, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      className: \"form-wrapper\",\n      onSubmit: event => event.preventDefault(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Timer Name: \", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.updateTimerName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setTimerName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Update\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Remaining Time (milliseconds): \", React.createElement(\"input\", {\n      type: \"number\",\n      onChange: this.updateTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Update\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/omstudent/Desktop/lab4/src/App.js"],"names":["React","Component","Timer","App","constructor","props","startStop","state","timer","clearInterval","setState","setInterval","newCount","count","updateCount","reset","increment","decrement","updateTimerName","event","changingTimerName","target","value","setTimerName","timerName","updateTime","changingCount","Number","setTime","render","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAC1BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,SARmB,GAQP,MAAM;AAChB,UAAI,KAAKC,KAAL,CAAWC,KAAf,EAAsB;AACpBC,QAAAA,aAAa,CAAC,KAAKF,KAAL,CAAWC,KAAZ,CAAb;AACA,aAAKE,QAAL,CAAc;AACZF,UAAAA,KAAK,EAAE;AADK,SAAd;AAGD,OALD,MAKO;AACL,YAAIA,KAAK,GAAGG,WAAW,CAAC,MAAM;AAC5B,gBAAMC,QAAQ,GAAG,KAAKL,KAAL,CAAWM,KAAX,GAAmB,CAApC;AACA,eAAKH,QAAL,CAAc;AACZG,YAAAA,KAAK,EAAED,QADK;AAEZJ,YAAAA,KAAK,EAAEA;AAFK,WAAd;;AAIA,cAAI,KAAKD,KAAL,CAAWM,KAAX,IAAoB,CAAxB,EAA2B;AACzBJ,YAAAA,aAAa,CAAC,KAAKF,KAAL,CAAWC,KAAZ,CAAb;AACD;AACF,SATsB,EASpB,CAToB,CAAvB;AAUD;AACF,KA1BkB;;AAAA,SA4BnBM,WA5BmB,GA4BL,MACZ,KAAKJ,QAAL,CAAc;AACZG,MAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM,KAAX,GAAmB;AADd,KAAd,CA7BiB;;AAAA,SAiCnBE,KAjCmB,GAiCX,MAAM;AACZN,MAAAA,aAAa,CAAC,KAAKF,KAAL,CAAWC,KAAZ,CAAb;AACA,WAAKE,QAAL,CAAc;AACZG,QAAAA,KAAK,EAAE,KADK;AAEZL,QAAAA,KAAK,EAAE;AAFK,OAAd;AAID,KAvCkB;;AAAA,SAyCnBQ,SAzCmB,GAyCP,MAAM;AAChB,WAAKN,QAAL,CAAc;AACZG,QAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM,KAAX,GAAmB,KADd;AAEZL,QAAAA,KAAK,EAAE;AAFK,OAAd;AAID,KA9CkB;;AAAA,SAgDnBS,SAhDmB,GAgDP,MAAM;AAChB,UAAI,KAAKV,KAAL,CAAWM,KAAX,GAAmB,KAAnB,IAA4B,CAAhC,EAAmC;AACjC,aAAKH,QAAL,CAAc;AACZG,UAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM,KAAX,GAAmB,KADd;AAEZL,UAAAA,KAAK,EAAE;AAFK,SAAd;AAID,OALD,MAKO;AACL;AACD;AACF,KAzDkB;;AAAA,SA2DnBU,eA3DmB,GA2DAC,KAAD,IAAW;AAC3B,WAAKT,QAAL,CAAc;AACZU,QAAAA,iBAAiB,EAAED,KAAK,CAACE,MAAN,CAAaC;AADpB,OAAd;AAGD,KA/DkB;;AAAA,SAiEnBC,YAjEmB,GAiEJ,MAAM;AACnB,WAAKb,QAAL,CAAc;AACZc,QAAAA,SAAS,EAAE,KAAKjB,KAAL,CAAWa;AADV,OAAd;AAGD,KArEkB;;AAAA,SAuEnBK,UAvEmB,GAuELN,KAAD,IAAW;AACtB,WAAKT,QAAL,CAAc;AACZgB,QAAAA,aAAa,EAAEC,MAAM,CAACR,KAAK,CAACE,MAAN,CAAaC,KAAd;AADT,OAAd;AAGD,KA3EkB;;AAAA,SA6EnBM,OA7EmB,GA6ET,MAAM;AACd,UAAI,KAAKrB,KAAL,CAAWmB,aAAX,IAA4B,CAAhC,EAAmC;AACjC,aAAKhB,QAAL,CAAc;AACZG,UAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWmB;AADN,SAAd;AAGD;AACF,KAnFkB;;AAEjB,SAAKnB,KAAL,GAAa;AACXM,MAAAA,KAAK,EAAE,KADI;AAEXW,MAAAA,SAAS,EAAE;AAFA,KAAb;AAID;;AA+EDK,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,SAAS,EAAE,KAAKvB,SADlB;AAEE,MAAA,WAAW,EAAE,KAAKQ,WAFpB;AAGE,MAAA,KAAK,EAAE,KAAKC,KAHd;AAIE,MAAA,SAAS,EAAE,KAAKC,SAJlB;AAKE,MAAA,SAAS,EAAE,KAAKC,SALlB;AAME,MAAA,IAAI,EAAE,KAAKV,KAAL,CAAWiB;AANnB,OAOM,KAAKjB,KAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EASI;AAAM,MAAA,SAAS,EAAC,cAAhB;AAA+B,MAAA,QAAQ,EAAEY,KAAK,IAAIA,KAAK,CAACW,cAAN,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACc;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAE,KAAKZ,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADd,EAEE;AAAQ,MAAA,OAAO,EAAE,KAAKK,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACiC;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,QAAQ,EAAE,KAAKE,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADjC,EAEE;AAAQ,MAAA,OAAO,EAAE,KAAKG,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CALF,CATJ,CADF;AAsBD;;AA7GyB;;AAgH5B,eAAezB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Timer from \"./Timer\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 90000,\n      timerName: \"Bacon Timer\"\n    };\n  }\n\n  startStop = () => {\n    if (this.state.timer) {\n      clearInterval(this.state.timer);\n      this.setState({\n        timer: null\n      });\n    } else {\n      var timer = setInterval(() => {\n        const newCount = this.state.count - 1;\n        this.setState({\n          count: newCount,\n          timer: timer\n        });\n        if (this.state.count <= 0) {\n          clearInterval(this.state.timer);\n        }\n      }, 1);\n    }\n  }\n\n  updateCount = () =>\n    this.setState({\n      count: this.state.count + 1\n    });\n\n  reset = () => {\n    clearInterval(this.state.timer);\n    this.setState({\n      count: 90000,\n      timer: null\n    });\n  }\n\n  increment = () => {\n    this.setState({\n      count: this.state.count + 30000,\n      timer: null\n    });\n  }\n\n  decrement = () => {\n    if (this.state.count - 30000 >= 0) {\n      this.setState({\n        count: this.state.count - 30000,\n        timer: null\n      });\n    } else {\n      return;\n    }\n  }\n\n  updateTimerName = (event) => {\n    this.setState({\n      changingTimerName: event.target.value\n    });\n  }\n\n  setTimerName = () => {\n    this.setState({\n      timerName: this.state.changingTimerName\n    })\n  }\n\n  updateTime = (event) => {\n    this.setState({\n      changingCount: Number(event.target.value)\n    });\n  }\n\n  setTime = () => {\n    if (this.state.changingCount >= 0) {\n      this.setState({\n        count: this.state.changingCount\n      }); \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Timer\n          startStop={this.startStop}\n          updateCount={this.updateCount}\n          reset={this.reset}\n          increment={this.increment}\n          decrement={this.decrement}\n          name={this.state.timerName}\n          {...this.state}/>\n          <form className=\"form-wrapper\" onSubmit={event => event.preventDefault()}>\n            <div>\n              Timer Name: <input type=\"text\" onChange={this.updateTimerName}></input>\n              <button onClick={this.setTimerName}>Update</button>\n            </div>\n            <div>\n              Remaining Time (milliseconds): <input type=\"number\" onChange={this.updateTime}></input>\n              <button onClick={this.setTime}>Update</button>\n            </div>\n          </form>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}